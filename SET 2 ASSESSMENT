ITA0433-STATISTICS WITH R PROGRAMMING 
NAME:-Y.MADAN REDDY
REG NO:-192125015
SET 2 ASSESSMENT 
11.
fact <- function(j) {
  if(j == 0) {
    return(1)
  } else {
    return(j * fact(j-1))
  }
}
12.
my_func <- function(a = 1, b = 2) {
  return(a + b)
}
my_func()
my_func(a = 5)
my_func(a = 5, b = 10)
13.
compute_stats <- function(vec) {
  stats <- list()
  stats$sum <- sum(vec)
  stats$average <- mean(vec)
  stats$median <- median(vec)
  return(stats)
}
my_vec <- c(1, 2, 3, 4, 5)
compute_stats(my_vec)
$sum
[1] 15

$average
[1] 3

$median
[1] 3
14.
my_matrix <- matrix(1:9, nrow = 3, ncol = 3)
apply(my_matrix, 1, sum)
[1]  6 15 24
my_list <- list(a = c(1, 2, 3), b = c(4, 5, 6), c = c(7, 8, 9))
lapply(my_list, sum)
$a
[1] 6
$b
[1] 15
$c
[1] 24
my_list <- list(a = c(1, 2, 3), b = c(4, 5, 6), c = c(7, 8, 9))
sapply(my_list, sum)
a  b  c 
6 15 24
15.
fibonacci <- function(n) {
  if (n <= 0) {
    stop("n must be a positive integer.")
  }
  else if (n == 1) {
    return(0)
  }
  else if (n == 2) {
    return(c(0, 1))
  }
  else {
    fib <- numeric(n)
    fib[1] <- 0
    fib[2] <- 1
    for (i in 3:n) {
      fib[i] <- fib[i-1] + fib[i-2]
    }
    return(fib)
  }
}
fibonacci(10)
[1]  0  1  1  2  3  5  8 13 21 34
16.
nums <- c(10, 20, 30, 40, 50, 60)
max_num <- nums[1]
min_num <- nums[1]
for (i in 2:length(nums)) {
   if (nums[i] > max_num) {
    max_num <- nums[i]
  }
  if (nums[i] < min_num) {
    min_num <- nums[i]
  }
}
cat("The maximum value is:", max_num, "\n")
cat("The minimum value is:", min_num, "\n")
The maximum value is: 60 
The minimum value is: 10
17.
a)
sort_asc <- function(x) {
  for (i in 1:length(x)) {
    for (j in 1:(length(x)-1)) {
      if (x[j] > x[j+1]) {
        temp <- x[j]
        x[j] <- x[j+1]
        x[j+1] <- temp
      }
    }
  }
  return(x)
}
b)
min_value <- function(x) {
  min_val <- x[1]
  for (i in 2:length(x)) {
    if (x[i] < min_val) {
      min_val <- x[i]
    }
  }
  return(min_val)
}
18.
a)
seq_20_50 <- 20:50
mean_20_60 <- mean(20:60)
sum_51_91 <- sum(51:91)
cat("Sequence of numbers from 20 to 50:", seq_20_50, "\n")
cat("Mean of numbers from 20 to 60:", mean_20_60, "\n")
cat("Sum of numbers from 51 to 91:", sum_51_91, "\n")
Sequence of numbers from 20 to 50: 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
Mean of numbers from 20 to 60: 40 
Sum of numbers from 51 to 91: 2628
b)
vec <- c(10, 20, 30, 40, 50)
for (i in 1:length(vec)) {
  cat(vec[i], "\n")
}
10 
20 
30 
40 
50
19.
a)
f <- function(x) {
  if (x <= 1 && x >= 0) {
    return(x)
  } else {
    return(0)
  }
}
b)
sum_mean <- function(x) {
  sum_x <- sum(x)
  mean_x <- mean(x)
  return(list(sum = sum_x, mean = mean_x))
}
vec <- c(10, 20, 30, 40, 50)
result <- sum_mean(vec)
cat("Sum of vector elements:", result$sum, "\n")
cat("Mean of vector elements:", result$mean, "\n")
Sum of vector elements: 150 
Mean of vector elements: 30
20.
A <- matrix(c(5, -1, 3, 3, 2, 4, 7, -4, 8), nrow = 3, byrow = TRUE)
b <- c(7, 10, -14)
x <- solve(A, b)
cat("The solution vector is: ", x)
The solution vector is:  1 -2 -3
21.
df <- data.frame(Height = c(66, 62, 63, 70, 74), GPA = c(3.80, 3.78, 3.88, 3.72, 3.69))
print(df)
mean_height <- mean(df$Height)
mean_gpa <- mean(df$GPA)
cat("Mean Height: ", mean_height, "\n")
cat("Mean GPA: ", mean_gpa, "\n")
  Height  GPA
1     66 3.80
2     62 3.78
3     63 3.88
4     70 3.72
5     74 3.69
Mean Height:  67
Mean GPA:  3.774
22.
a)
a <- c(10,20,10,10,40,50,20,30)
b <- c(10,30,10,20,0,50,30,30)
df <- data.frame(a,b)
duplicated_rows <- df[duplicated(df),]
cat("Duplicated Rows:\n")
print(duplicated_rows)
unique_rows <- unique(df)
cat("Unique Rows:\n")
print(unique_rows)
Duplicated Rows:
   a  b
3 10 10
8 20 30
Unique Rows:
    a  b
1  10 10
2  20 30
4  40  0
5  50 50
6  20 30
7  30 30
b)
a <- c(10,20,10,10,40,50,20,30)
b <- c(10,30,10,20,0,50,30,30)
df <- data.frame(a,b)
mean_b <- aggregate(b ~ a, df, mean)
cat("Mean of b with respect to a:\n")
print(mean_b)
Mean of b with respect to a:
    a        b
1  10 16.66667
2  20 30.00000
3  30 30.00000
4  40  0.00000
5  50 50.00000
23.
exam_data <- data.frame(
  name = c('Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura'),
  score = c(12.5, 9, 16.5, 12, 9, 20, 14.5, 13.5),
  attempts = c(1, 3, 2, 3, 2, 3, 1, 1),
  qualify = c('yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no')
)
write.table(exam_data, file = "exam_data.txt", sep = ",", col.names = TRUE, row.names = FALSE)
cat("Contents of the file:\n")
cat(readLines("exam_data.txt"), sep = "\n")
Contents of the file:
"name","score","attempts","qualify"
"Anastasia",12.5,1,"yes"
"Dima",9,3,"no"
"Katherine",16.5,2,"yes"
"James",12,3,"no"
"Emily",9,2,"no"
"Michael",20,3,"yes"
"Matthew",14.5,1,"yes"
"Laura",13.5,1,"no"
24.
a)
exam_data <- data.frame(
  name = c('Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura'),
  score = c(12.5, 9, 16.5, 12, 9, 20, 14.5, 13.5),
  attempts = c(1, 3, 2, 3, 2, 3, 1, 1),
  qualify = c('yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no')
)
b)
score_attempts <- exam_data[, c('score', 'attempts')]
c)
name_qualify <- exam_data[, c(1, 4)]
d)
exam_data[c(3, 5), c(1, 3)]
e)
exam_data[exam_data$name == 'James', ]
25.
n <- c(1, 1, 2, 2)
time <- c(1, 2, 1, 2)
x <- c(6, 3, 2, 5)
y <- c(1, 4, 6, 9)
df <- data.frame(n, time, x, y)
i)
library(reshape2)
melted_df <- melt(df, id.vars = c("n", "time"))
ii)
library(reshape2)
melted_df <- melt(df, id.vars = c("n", "time"))
26.
a)
df <- data.frame(name = c('John', 'Jane', 'Mark', 'Sara'),
                 score = c(85, 92, 78, 88))
df_sorted <- df[order(df$name, df$score), ]
b)
exam_data <- data.frame(name = c('Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura'),
                        score = c(12.5, 9, 16.5, 12, 9, 20, 14.5, 13.5),
                        attempts = c(1, 3, 2, 3, 2, 3, 1, 1),
                        qualify = c('yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no'))
avg_score <- aggregate(score ~ qualify, data = exam_data, mean)
30.
df <- data.frame(name = c('Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura'),
                 score = c(12.5, 9, 16.5, 12, 9, 20, 14.5, 13.5),
                 attempts = c(1, NA, 2, NA, 2, NA, 1, 1),
                 qualify = c('yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no'))
names(df)[names(df) == "name"] <- "stu.name"
names(df)[names(df) == "score"] <- "avg.score"
df

